" File: vimrc
" Author: Philippe Schottey
"
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate pathogen plugin loader
execute pathogen#infect()

" ====================
" COLORSCHEME
" ====================
set t_Co=256
syntax on
set cursorline

set background=dark

" colorscheme monotonic
"     hi CursorLineNr cterm=none ctermfg=yellow
"     hi Constant cterm=none ctermfg=lightblue
"     hi IncSearch cterm=none ctermbg=red
"     hi MatchParen ctermfg=darkblue ctermbg=white
"     " Since cursor line is on, background doesn't work on spell errors (not while
"     " on the same line anyway)
"     hi SpellBad ctermbg=none ctermfg=lightred cterm=underline
"     hi StatusLine ctermfg=yellow
"     " NerdTree
"     hi NERDTreeFile cterm=none ctermfg=lightblue
"     hi NERDTreeExecFile cterm=bold ctermfg=lightblue
"     hi NERDTreeDir cterm=none
"     hi Directory cterm=none
"     hi NERDTreeOpenable cterm=none
"     hi NERDTreeClosable cterm=none
"     " Markdown colors
"     hi markdownHeadingDelimiter ctermfg=blue cterm=bold
"     hi markdownH1 ctermfg=lightblue cterm=bold
"     hi markdownH2 ctermfg=lightblue cterm=bold
"     hi markdownH3 ctermfg=lightblue cterm=bold
"     hi markdownH4 ctermfg=lightblue cterm=bold
"     hi markdownH5 ctermfg=lightblue cterm=bold
"     hi markdownH6 ctermfg=lightblue cterm=bold
"     hi markdownCode ctermfg=brown

colorscheme onedark
hi SpellBad ctermbg=none ctermfg=red cterm=underline
hi SpellCap ctermbg=none ctermfg=lightred cterm=underline
hi SpellRare ctermbg=none ctermfg=lightred cterm=underline

" Highlight characters that go over de 80th column
hi ColorColumn ctermbg=black ctermfg=white
call matchadd('ColorColumn', '\%81v', 100)

" ====================
" SETTINGS
" ====================
" Searching
set ignorecase
set smartcase
" highlight search results
set hlsearch
" do incremental searching
set incsearch
" Show line numbers in gutter
set nu
set relativenumber
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" keep a backup file (restore to previous version)
set backup
" keep an undo file (undo changes after closing)
set undofile
" keep 50 lines of command line history
set history=50
" display incomplete commands
set showcmd
" Show white space characters
set listchars=tab:>~,nbsp:_,trail:.
set list

" ====================
" STATUSLINE
" ====================
set laststatus=2
set statusline=(%n)\ %.20f\ %y\ [%{GetFileEncoding()}]\ [%{GetFileFormat()}]\ %m
set statusline+=%=
set statusline+=
set statusline+=%c:%l\ (%L)
set statusline+=\ %P

function! GetFileEncoding()
  return &fileencoding
endfunction

function! GetFileFormat()
  return &fileformat
endfunction

" ====================
" PLUGIN SYNTASTIC
" ====================
let g:syntastic_mode_map = { "mode": "passive", "active_filetypes": ["javascript", "php"], "passive_filetypes": ["java"] }
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" Only check synatax on write. This was mostly done to allow switching buffers
" faster when developing in Java. 
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
" Settings for javascript
let g:syntastic_javascript_checkers = ['eslint']
" Settings for php
let g:syntastic_php_checkers = ['php', 'phpstan']
" let g:syntastic_php_checkers = ['php']
" let g:syntastic_php_phpcs_exec = 'phpcs.phar'
let g:syntastic_php_phpstan_exec = './vendor/./bin/phpstan'
let g:syntastic_php_phpstan_args = '-l 2 -c phpstan.neon'
" Settings for java
let g:syntastic_java_checkers=['javac']
" Use a file named syntastic_javac_config to determine the classpath to use
let g:syntastic_java_javac_config_file_enabled = 1

" ====================
" PLUGIN CTRLP
" ====================
let g:ctrlp_max_files=20000
" let g:ctrlp_custom_ignore='.*(\.git\|\.hg\|\.svn\|\~\|target\|node_modules\|build\|\.class\|bin)$'
let g:ctrlp_custom_ignore='\v[\/]((\.(git|hg|svn))|(target|dist|node_modules|build|bin|vendor)|(.*\~))$'
let g:ctrlp_root_markers = ['ivy.xml', 'build.gradle', 'composer.json', 'package.json', 'build.xml']
let g:ctrlp_show_hidden = 1

" ====================
" PLUGIN TAGBAR
" ====================
let g:tagbar_width = 60

" ====================
" PLUGIN SNIPMATE
" ====================
let g:snipMate = {}
" Force parse version to 1 
let g:snipMate.snippet_version = 1

" ====================
" PLUGIN NERDTREE
" ====================
let NERDTreeWinSize = 45

" ====================
" ABBREVIATIONS
" ====================
iabbrev @@ schophil@icloud.com
iabbrev ps Philippe Schottey

" ====================
" KEY MAPPINGS
" ====================
" Remap the leader to ,
let mapleader = ","
" Toggle NERDTree
nnoremap <Leader>t :NERDTreeToggle<CR> 
" Toggle syntastic validation/output
nnoremap <Leader>s :SyntasticToggleMode<CR>
" Mappings to resize panes 
nnoremap <Leader>ss :vertical resize -4<CR>
nnoremap <Leader>ww :vertical resize +4<CR>
" Copy to the macOS registry
vnoremap <Leader>k "*y
nnoremap <Leader>p "*p
" Shortcut to edit the vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" Shortcut to source the vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
" Shortcut to search in buffers with Ctrlp
nnoremap <C-b> :CtrlPBuffer<cr>
" Shortcut to switch to a buffer. This will show the list of buffers and start
" the :buffer command. You only need to type a buffer number and press <cr>.
nnoremap <Leader>b :buffers<cr>:buffer 
" Deactivate the arrows
map <Down> <Nop>
map <Up> <Nop>
map <Left> <Nop>
map <Right> <Nop>
imap <Down> <Nop>
imap <Up> <Nop>
imap <Left> <Nop>
imap <Right> <Nop>
" Remove highlighted search results
nnoremap <BS> :noh<cr>
" Reformat file
nnoremap <leader>f :execute ":normal! mzggVG=`z:delmarks z\r"<cr>
" Toggle "outline" tagbar
nnoremap <leader>o :TagbarOpenAutoClose<cr>
" Spelling
nnoremap (s [s
nnoremap )s ]s
" Edit snippets for current file type
nnoremap <leader>es :execute ":vsplit ~/.vim/snippets/" . &ft . ".snippets"<cr>
nnoremap <F3> <C-]>
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
" inoremap <expr> <Tab> <SID>tabAutoComplete()
imap <Tab> <Plug>snipMateNextOrTrigger
nnoremap Âµ `
nnoremap ; :execute "A;<Esc>"

" ====================
" Functions
" ====================
function! s:tabAutoComplete()
  if pumvisible()
    return "\<C-n>"
  else
    return "\<C-x>\<C-o>"
  endif
endfunction

function! s:formatJSON()
  " Every { followed by a non white space character should be followed by a new line
  silent %s/{\(\S\)/{\r\1/ge
  " Lists of objects
  silent %s/\[{/\[\r{/ge
  silent %s/}\]/}\r\]/ge
  silent %s/\]}/\]\r}/ge
  silent %s/,{/,\r{/ge
  " Every } preceeded by non-space characters should be
  " on a new line
  silent %s/\(\S\)}/\1\r}/ge
  " New lines after values
  silent %s/,"/,\r"/ge
  " Space after each ": followed by a non-space character.
  silent %s/":\(\S\)/": \1/ge
  noh
  " TODO: remove empty lines if any
  " Use the normal formatting of vim to finish up
  silent normal! ggVG==
endfunction

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" ====================
" FILE TYPES
" ====================
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  set omnifunc=syntaxcomplete#Complete
  " ...
endif

autocmd BufReadPost *.conf set syntax=conf

" Java oriented tools
" Shortcut to edit the Java snippets
augroup filetype_java
  autocmd!
  autocmd FileType java nnoremap <buffer> <leader>jf :normal! ma^ifinal `ama
augroup end

" Javascript tools
" Shortcut to edit the Javascript snippets
augroup filetype_javascript
  autocmd!
augroup end
augroup filetype_json
  autocmd!
  autocmd FileType json nnoremap <buffer> <silent> <leader>pp :call <SID>formatJSON()<cr>
augroup end

" Markdown oriented tools
augroup filetype_markdown
  autocmd!
  " Shortcut to surround inner word with _
  autocmd FileType markdown nnoremap <buffer> _ :normal ysiw_<cr>
augroup end

" PHP oriented tools
augroup filetype_php
  autocmd!
augroup end

" Editorconfig tools
augroup filetype_dosini
  autocmd!
augroup end

