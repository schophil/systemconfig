" File: vimrc
" Author: Philippe Schottey
"
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" activate pathogen plugin loader
execute pathogen#infect()

" set preferred colors
set t_Co=256
set termguicolors
"colorscheme monokai
colorscheme codedark

" General settings
" 
" allow backspacing over everything in insert mode
set backspace=indent,eol,start 
" keep a backup file (restore to previous version)
set backup		
" keep an undo file (undo changes after closing)
set undofile		
" keep 50 lines of command line history
set history=50		
" show the cursor position all the time
set ruler		
" display incomplete commands
set showcmd		
" do incremental searching
set incsearch		
" show line numbers in gutter
set nu			
" show relative line numbers
set relativenumber	
" activate syntax highlighting - TODO: Isn't this handled by the colorscheme?
syntax on		
" highlight search results
set hlsearch		

if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  " ...
endif

" Plugin syntastic settings
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" Only check synatax on write. This was mostly done to allow switching buffers
" faster when developping in Java. 
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
" Settings for java
let g:syntastic_java_checkers=['javac']
" Use a file named syntastic_javac_config to determine the classpath to use
let g:syntastic_java_javac_config_file_enabled = 1

" Plugin vim-airline settings
"
" Color theme for the airline bar
"let g:airline_theme = 'cool'
let g:airline_theme = 'codedark'
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
"let g:airline_left_sep = '>'
"let g:airline_right_sep = '<'
"let g:airline_powerline_fonts = 1

" Plugin ctrl-p settings
"
let g:ctrlp_max_files=20000
let g:ctrlp_custom_ignore='.*(\.git\|\.hg\|\.svn\|\~\|target\|node_modules\|build\|\.class\|bin)$'
let g:ctrlp_root_markers = ['ivy.xml', 'build.gradle']

" Key mappings
"
" Remap the leader to ,
let mapleader = ","
" Remap keys to switch buffers faster:
" Go to previous buffer
nnoremap <C-s> :bprevious<CR>
" Go to next buffer
nnoremap <C-c> :bnext<CR>
" Toggle NERDTree
nnoremap <Leader>t :NERDTreeToggle<CR> 
" Toggle syntastic validation/output
nnoremap <Leader>s :SyntasticToggleMode<CR>
" Mappings to resize panes 
nnoremap <Leader>ss :vertical resize -4<CR>
nnoremap <Leader>ww :vertical resize +4<CR>
" Copy to the macOS registry
vnoremap <Leader>k :w !pbcopy<CR><CR>

" Snipmate plugin
"
let g:snipMate = {}
" Force parse version to 1
let g:snipMate.snippet_version = 1

" File types
"
autocmd BufReadPost *.conf set syntax=conf

" Java tools
function! JavaImport(spec)
  execute "normal mmgg/import \rOimport " . a:spec . ";\<Esc>`m"
endfunction
" Adds a class annotatic
function! JavaAnnotateClass(annotation)
  execute "normal mmgg/class\rO@" . a:annotation . "\<Esc>`m"
endfunction
" Adds a property annotation
function! JavaAnnotateProperty(annotation)
  execute "normal O@" . a:annotation . "\<Esc>j"
endfunction
" Adds the @Column annotation to the current attribute.
function! JavaEntityColumn() 
  call JavaAnnotateProperty('Column')
endfunction
" Adds the @Id annotation to the current attribute.
function! JavaEntityId() 
  call JavaAnnotateProperty('Id')
  call JavaAnnotateProperty('GeneratedValue')
endfunction
" Adds the @Entity annotation to the current class.
function! JavaEntityClass() 
  call JavaAnnotateClass('Entity')
endfunction
" Keymappigs for the Java tools
nnoremap <Leader>jpc :call JavaEntityColumn()<cr>
nnoremap <Leader>jpi :call JavaEntityId()<cr>
nnoremap <Leader>jpe :call JavaEntityClass()<cr>
nnoremap <Leader>jld :call JavaAnnotateClass('Data')<cr>
nnoremap <Leader>jss :call JavaAnnotateClass('Service')<cr>
nnoremap <Leader>jsw :call JavaAnnotateProperty('Autowired')<cr>

