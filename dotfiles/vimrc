" File: vimrc
" Author: Philippe Schottey
"
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate pathogen plugin loader
execute pathogen#infect()

" Set preferred colors
set t_Co=256

syntax on
set cursorline

colorscheme dracula
hi TagbarSignature ctermfg=gray

" colorscheme monotonic
" hi CursorLineNr cterm=none ctermfg=yellow
" hi Constant cterm=none ctermfg=lightblue
" hi IncSearch cterm=none ctermbg=red
" hi MatchParen ctermfg=darkblue ctermbg=white

" Since cursor line is on, background doesn't work on spell errors (not while
" on the same line anyway)
hi SpellBad ctermbg=none ctermfg=lightred cterm=underline
hi StatusLine ctermfg=lightgreen

" Searching
set ignorecase
set smartcase
" highlight search results
set hlsearch
" do incremental searching
set incsearch

" Show line numbers in gutter
set nu
set relativenumber

" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" keep a backup file (restore to previous version)
set backup
" keep an undo file (undo changes after closing)
set undofile
" keep 50 lines of command line history
set history=50
" display incomplete commands
set showcmd

" Show white space characters
set listchars=tab:>~,nbsp:_,trail:.
set list

" Set the statusline
set laststatus=2
set statusline=(%n)\ %.20f\ %y\ [%{GetFileEncoding()}]\ [%{GetFileFormat()}]\ %m
set statusline+=%=
set statusline+=
set statusline+=%c:%l\ (%L)
set statusline+=\ %P

function! GetFileEncoding()
	return &fileencoding
endfunction

function! GetFileFormat()
	return &fileformat
endfunction

" Highlight characters that go over de 80th column
hi ColorColumn ctermbg=magenta ctermfg=black
call matchadd('ColorColumn', '\%81v', 100)

if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  " ...
endif

" Plugin syntastic settings
"
let g:syntastic_mode_map = { "mode": "passive", "active_filetypes": ["javascript", "php"], "passive_filetypes": ["java"] }
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" Only check synatax on write. This was mostly done to allow switching buffers
" faster when developing in Java. 
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1
" Settings for javascript
let g:syntastic_javascript_checkers = ['eslint']
" Settings for php
let g:syntastic_php_checkers = ['php', 'phpstan']
let g:syntastic_php_phpcs_exec = 'phpcs.phar'
let g:syntastic_php_phpstan_exec = './vendor/./bin/phpstan'
" Settings for java
let g:syntastic_java_checkers=['javac']
" Use a file named syntastic_javac_config to determine the classpath to use
let g:syntastic_java_javac_config_file_enabled = 1

" Plugin ctrl-p settings
"
let g:ctrlp_max_files=20000
" let g:ctrlp_custom_ignore='.*(\.git\|\.hg\|\.svn\|\~\|target\|node_modules\|build\|\.class\|bin)$'
let g:ctrlp_custom_ignore='\v[\/]((\.(git|hg|svn))|(target|node_modules|build|bin|vendor)|(.*\~))$'
let g:ctrlp_root_markers = ['ivy.xml', 'build.gradle']
let g:ctrlp_show_hidden = 1

" Plugin Tagbar
"
let g:tagbar_width = 60

" Key mappings
"
" Remap the leader to ,
let mapleader = ","
" Toggle NERDTree
nnoremap <Leader>t :NERDTreeToggle<CR> 
" Toggle syntastic validation/output
nnoremap <Leader>s :SyntasticToggleMode<CR>
" Mappings to resize panes 
nnoremap <Leader>ss :vertical resize -4<CR>
nnoremap <Leader>ww :vertical resize +4<CR>
" Copy to the macOS registry
vnoremap <Leader>k "*y
nnoremap <Leader>p "*p
" Shortcut to edit the vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" Shortcut to source the vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
" Shortcut to search in buffers with Ctrlp
nnoremap <C-b> :CtrlPBuffer<cr>
" Shortcut to switch to a buffer. This will show the list of buffers and start
" the :buffer command. You only need to type a buffer number and press <cr>.
nnoremap <Leader>b :buffers<cr>:buffer 
" Deactivate the arrows
map <Down> <Nop>
map <Up> <Nop>
map <Left> <Nop>
map <Right> <Nop>
imap <Down> <Nop>
imap <Up> <Nop>
imap <Left> <Nop>
imap <Right> <Nop>
" Remove highlighted search results
nnoremap <BS> :noh<cr>
" Reformat file
nnoremap <leader>f :normal! ggVG=<cr>
" Toggle "outline" tagbar
nnoremap <leader>o :TagbarOpenAutoClose<cr>

" Abbreviations
iabbrev @@ schophil@icloud.com
iabbrev ps Philippe Schottey

" Snipmate plugin func {}
"
let g:snipMate = {}
" Force parse version to 1 
let g:snipMate.snippet_version = 1

" File types
"
autocmd BufReadPost *.conf set syntax=conf

" Java oriented tools
" Shortcut to edit the Java snippets
augroup filetype_java
	autocmd!
	" Shortcut to edit the snippets
	autocmd FileType java nnoremap <buffer> <leader>es :vsplit ~/.vim/snippets/java.snippets<cr>
	autocmd FileType java nnoremap <buffer> <leader>jf :normal! ma^ifinal `ama
augroup end

" Javascript tools
" Shortcut to edit the Javascript snippets
augroup filetype_javascript
	autocmd!
	autocmd FileType javascript nnoremap <buffer> <leader>es :vsplit ~/.vim/snippets/javascript.snippets<cr>
augroup end

" Markdown oriented tools
augroup filetype_markdown
	autocmd!
	" Shortcut to surround inner word with _
	autocmd FileType markdown nnoremap <buffer> _ :normal ysiw_<cr>
augroup end

" Spelling
"
" set spell
nnoremap (s [s
nnoremap )s ]s
